name: Deploy application

on:
  push:
    branches:
      - main

env:
  path: App

jobs:
  settings:
    name: App version
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.version.outputs.patch-version }}
      version: ${{ steps.app.outputs.value }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest

    - name: Current package version
      id: package_version
      run: echo "::set-output name=value::$(cd ${{ env.path }} && npm pkg get version)"

    - name: Set version
      id: app
      run: echo "version=${{ steps.package_version.outputs.value }}" >> $GITHUB_ENV

  setup:
    name: Set up
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest

    - name: Install NPM dependencies
      run: cd ${{ env.path }} && npm ci

    - name: Cache NPM dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.path }}/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('${{ env.path }}/package-lock.json') }}

  android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [settings, setup]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest

    - name: Cache NPM dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.path }}/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('${{ env.path }}/package-lock.json') }}

    - name: Set app version
      run: cd ${{ env.path }} && npm pkg set version=${{ needs.settings.outputs.version }}

    - name: Build code
      run: cd ${{ env.path }}/android && ./gradlew assembleRelease -PversionCode=${{ needs.settings.outputs.code }} -PversionName=${{ needs.settings.outputs.version }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: android
        path: ${{ env.path }}/android/app/build/outputs/apk/release/app-release.apk

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [settings, android]

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: android

    - name: Create release
      uses: actions/create-release@v1
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_name: Release ${{ needs.settings.outputs.version }}
        tag_name: ${{ needs.settings.outputs.version }}
        draft: false
        prerelease: false

    - name: Publish release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: app-release.apk
        asset_name: cronos-${{ needs.settings.outputs.version }}.apk
        asset_content_type: octet-stream